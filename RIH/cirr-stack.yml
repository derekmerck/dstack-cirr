version: '3.3'


networks:
  service_network:
  proxy_network:
  agent_network:


configs:
  cirr_services.yml:
    file: ./cirr_services.yml
  cirr_routes.yml:
    file: ./cirr_routes.yml


services:

  # -------------------------------
  # MANAGER NODE SERVICES
  # -------------------------------

  portainer:
    image: portainer/portainer
    command: -H tcp://tasks.portainer-agent:9001 --tlsskipverify --admin-password ${PORTAINER_PASSWORD}
    ports:
      - "9000:9000"
    networks:
      - proxy_network
      - agent_network
    environment:
      TZ: "America/New_York"
    deploy:
      replicas: 1
      labels:
        - "traefik.docker.network=cirr_proxy_network"
        - "traefik.port=9000"
        - "traefik.frontend.rule=PathPrefixStrip:/portainer/"
      placement:
        constraints:
          - node.role==manager


  traefik:
    image: traefik
    command: "--api --docker --docker.swarmmode"
    ports:
      - "80:80"
      - "433:433"
      - "8080:8080"
    networks:
      - proxy_network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      TZ: "America/New_York"
    deploy:
      placement:
        constraints:
          - node.role==manager


  # -------------------------------
  # GLOBAL SERVICES
  # -------------------------------

  portainer-agent:
    image: portainer/agent
    environment:
      AGENT_CLUSTER_ADDR: tasks.portainer-agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - agent_network
    deploy:
      mode: global
      placement:
        constraints:
          - node.platform.os==linux


  # -------------------------------
  # DATA BACKEND SERVICES
  # -------------------------------

  splunk:
    image: splunk/splunk
    ports:
      - "8100:8000"
      - "8188:8088"
      - "8189:8089"
    networks:
      - service_network
      - proxy_network
    volumes:
      - /data/splunk:/opt/splunk/etc
    environment:
      SPLUNK_START_ARGS: "--accept-license"
      SPLUNK_PASSWORD:   ${SPLUNK_PASSWORD}
      TZ: "America/New_York"
    deploy:
      replicas: 1
      labels:
        - "traefik.docker.network=cirr_proxy_network"
        - "traefik.port=8000"
        - "traefik.frontend.rule=PathPrefixStrip:/splunk/"
      placement:
        constraints:
          - node.labels.storage==true
      resources:
        limits:
          cpus:   '2'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 2G


  postgres:
    image: postgres
    networks:
      - service_network
    volumes:
      - /data/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_USER:            orthanc
      POSTGRES_PASSWORD:        ${POSTGRES_PASSWORD}
      TZ: "America/New_York"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.storage==true
      resources:
        limits:
          cpus:  '2'
          memory: 4G
        reservations:
          cpus:   '0.5'
          memory: 2G


  # -------------------------------
  # UNCONSTRAINED SERVICES
  # -------------------------------

  orthanc-archive:
    image: derekmerck/orthanc-confd:latest-amd64
    ports:
      - 4242:4242
    networks:
      - service_network
      - proxy_network
    environment:
      ORTHANC_NAME:             CIRR Archive
      ORTHANC_AET:              CIRRARC
      ORTHANC_PASSWORD:         ${ORTHANC_PASSWORD}
      ORTHANC_STORE_COMPRESSED: "true"
      ORTHANC_PG_ENABLED:       "true"
      ORTHANC_PG_STORE_DICOM:   "true"
      ORTHANC_PG_DATABASE:      archive
      ORTHANC_PG_HOST:          postgres
      ORTHANC_PG_USER:          orthanc
      ORTHANC_PG_PASSWORD:      ${POSTGRES_PASSWORD}
      ORTHANC_VERBOSE:          "true"
      TZ:                       "America/New_York"
    deploy:
      replicas: 2  # Multiple nodes, PG provides data persistence
      labels:
        - "traefik.docker.network=cirr_proxy_network"
        - "traefik.port=8042"
        - "traefik.frontend.rule=PathPrefixStrip:/archive/"
      resources:
        limits:
          cpus:   '0.5'
          memory: 500M
        reservations:
          cpus:   '0.2'
          memory: 100M


  orthanc-router:
    image: derekmerck/orthanc-confd:latest-amd64
    ports:
      - "5252:4242"
    networks:
      - service_network
      - proxy_network
    environment:
      ORTHANC_NAME:             CIRR Router
      ORTHANC_AET:              CIRRROUTER
      ORTHANC_PASSWORD:         ${ORTHANC_PASSWORD}
      ORTHANC_MAX_PATIENTS:     50
      ORTHANC_ROUTE_TO_PEERS:   archive
      ORTHANC_ROUTE_TO_MODS:    workstation
      ORTHANC_PEER_0:           archive,http://orthanc-archive:8042,orthanc,${ORTHANC_PASSWORD}
      ORTHANC_MOD_0:            workstation,${MOD_WORKSTATION}
      ORTHANC_VERBOSE:         "true"
      TZ:                      "America/New_York"
    deploy:
      replicas: 1  # Single node, semi-persistent data
      labels:
        - "traefik.docker.network=cirr_proxy_network"
        - "traefik.port=8042"
        - "traefik.frontend.rule=PathPrefixStrip:/router/"
      resources:
        limits:
          cpus:   '0.5'
          memory: 500M
        reservations:
          cpus:   '0.2'
          memory: 100M


  # AET, port, and ip registered with the pacs
  orthanc-bridge:
    image: derekmerck/orthanc-confd:latest-amd64
    ports:
      - "11112:4242"
    networks:
      - service_network
      - proxy_network
    environment:
      ORTHANC_NAME:             CIRR Bridge
      ORTHANC_AET:              CIRR0
      ORTHANC_PASSWORD:         ${ORTHANC_PASSWORD}
      ORTHANC_MAX_PATIENTS:     50
      ORTHANC_PEER_0:           archive,http://orthanc-archive:8042,orthanc,${ORTHANC_PASSWORD}
      ORTHANC_PEER_1:           review01,http://orthanc-review-01:8042,orthanc,${ORTHANC_PASSWORD}
      ORTHANC_MOD_0:            mock,MOCK,orthanc-mock,4242
      ORTHANC_MOD_1:            pacs,${MOD_PACS}
      ORTHANC_VERBOSE:          "true"
      TZ:                       "America/New_York"
    deploy:
      replicas: 1  # Single node, semi-persistent data
      labels:
        - "traefik.docker.network=cirr_proxy_network"
        - "traefik.port=8042"
        - "traefik.frontend.rule=PathPrefixStrip:/bridge/"
      resources:
        limits:
          cpus:   '0.5'
          memory: 500M
        reservations:
          cpus:   '0.2'
          memory: 100M


  diana-watcher:
    image: derekmerck/diana
    # Comment out command to idle a connected diana container for testing
    # command: python3 /opt/diana/apps/cli/diana-watcher.py -s /cirr_services.yml -c /cirr_routes.yml
    networks:
      - service_network
    configs:
      - cirr_services.yml
      - cirr_routes.yml
    environment:
      ORTHANC_PASSWORD:         ${ORTHANC_PASSWORD}
      SPLUNK_HEC_TOKEN:         ${SPLUNK_HEC_TOKEN}
      TZ:                       "America/New_York"
    deploy:
      replicas: 1


  # -------------------------------
  # MOCK PACS
  # -------------------------------

  orthanc-mock:
    image: derekmerck/orthanc-confd:latest-amd64
    networks:
      - service_network
      - proxy_network
    environment:
      ORTHANC_NAME:             Mock PACS
      ORTHANC_AET:              MOCKPACS
      ORTHANC_MAX_PATIENTS:     50
      ORTHANC_PASSWORD:         ${ORTHANC_PASSWORD}
      ORTHANC_MOD_0:            cirr,CIRR1,orthanc-bridge,4242
      ORTHANC_VERBOSE:          "true"
      TZ:                       "America/New_York"
    deploy:
      replicas: 1
      labels:
        - "traefik.docker.network=cirr_proxy_network"
        - "traefik.port=8042"
        - "traefik.frontend.rule=PathPrefixStrip:/mock/"


  diana-mock:
    image: derekmerck/diana
    command:                    python3 /opt/diana/apps/cli/diana-mock.py -s /cirr_services.yml -d mock -r 30
    networks:
      - service_network
    configs:
      - cirr_services.yml
    environment:
      TZ:                       "America/New_York"
    deploy:
      replicas: 1

